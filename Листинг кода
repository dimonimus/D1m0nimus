Форма главного меню
using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Microsoft.Win32;
using WpfApp2;
using WpfApp2.Proper;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Threading;
using System.Net.NetworkInformation;
using NAudio.Wave;
using NAudio.Lame;




namespace UltimateVideoConverter
{
    public partial class MainWindow : Window
    {
        private DispatcherTimer autoScrollTimer;
        private bool userScrolling = false;
        private DateTime lastScrollTime;
        public MainWindow()
        {
            InitializeComponent();
            this.KeyDown += MainWindow_KeyDown;
        }
        private StringBuilder keySequence = new StringBuilder();

        private void Settings_Click(object sender, RoutedEventArgs e)
        {
            var settingsWindow = new SettingsWindow();
            settingsWindow.Owner = this;
            settingsWindow.ShowDialog();
        }

        private void FindFFmpeg_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Найдите ffmpeg.exe",
                Filter = "Executable Files (*.exe)|*.exe"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                Settings.Default.FFmpegPath = openFileDialog.FileName;
                Settings.Default.Save();
            }
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            KEK loginWindow = new KEK();
            loginWindow.ShowDialog();
            this.Close();
        }

        private void About_Click(object sender, RoutedEventArgs e)
        {
            ErrorMessage.ShowError("Используется open-source программа ffmpeg.\n\nЛицензия: GPL\n\nАвтор: D1m0mimus\nКомпания: Anarchy Avenue");
        }

        private void NextScreen_Click(object sender, RoutedEventArgs e)
        {
            VideoPlayerWindow videoPlayer = new VideoPlayerWindow();
            videoPlayer.Show();
            this.Close();
        }

        private void ConvertToMp4_Click(object sender, RoutedEventArgs e)
        {
            ConvertVideo("mp4");
        }

        private void ConvertToAvi_Click(object sender, RoutedEventArgs e)
        {
            ConvertVideo("avi");
        }

        private void ConvertToWmv_Click(object sender, RoutedEventArgs e)
        {
            ConvertVideo("wmv");
        }

        private void ConvertToMkv_Click(object sender, RoutedEventArgs e)
        {
            ConvertVideo("mkv");
        }
        private void ConvertToMov_Click(object sender, RoutedEventArgs e)
        {
            ConvertVideo("mov");
        }
        private void ConvertToFlv_Click(object sender, RoutedEventArgs e)
        {
            ConvertVideo("flv");
        }
        private void ConvertWAVToMP3_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("mp3");
        }

        private void ConvertAACToMP3_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("mp3");
        }

        private void ConvertOGGToMP3_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("mp3");
        }

        private void ConvertFLACToWAV_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("wav");
        }

        private void ConvertWAVToAAC_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("aac");
        }

        private void ConvertWAVToOGG_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("ogg");
        }

        private void ConvertWAVToFLAC_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("flac");
        }

        private void ConvertAACToWAV_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("wav");
        }

        private void ConvertAACToOGG_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("ogg");
        }

        private void ConvertAACToFLAC_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("flac");
        }

        private void ConvertOGGToWAV_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("wav");
        }

        private void ConvertOGGToAAC_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("aac");
        }

        private void ConvertOGGToFLAC_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("flac");
        }

        private void ConvertFLACToAAC_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("aac");
        }

        private void ConvertFLACToOGG_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("ogg");
        }
        private void ConvertFLACToMP3_Click(object sender, RoutedEventArgs e)
        {
            ConvertAudio("mp3");
        }

        private void ConvertVideo(string format)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Выберите видео файл",
                Filter = "Видео файлы (*.mp4;*.avi;*.wmv;*.mkv;*.mov;*.flv)|*.mp4;*.avi;*.wmv;*.mkv;*.mov;*.mov;*.flv|Все файлы (*.*)|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() == true)
            {
                string inputFilePath = openFileDialog.FileName;

                BitrateInputWindow bitrateInputWindow = new BitrateInputWindow
                {
                    SelectedFormat = format 
                };

                if (bitrateInputWindow.ShowDialog() == true && bitrateInputWindow.Bitrate.HasValue)
                {
                    int bitrate = bitrateInputWindow.Bitrate.Value;
                    string codec = bitrateInputWindow.Tag?.ToString();

                    SaveFileDialog saveFileDialog = new SaveFileDialog
                    {
                        Title = "Сохранить файл",
                        Filter = $"{format.ToUpper()} Файлы|*.{format}|Все файлы|*.*"
                    };

                    if (saveFileDialog.ShowDialog() == true)
                    {
                        string outputFilePath = saveFileDialog.FileName;
                        string ffmpegPath = Settings.Default.FFmpegPath ?? string.Empty;

                        if (string.IsNullOrEmpty(ffmpegPath))
                        {
                            OutputTextBox.AppendText("Пожалуйста, укажите путь к ffmpeg.exe в настройках.\n");
                            return;
                        }

                        ProcessStartInfo processStartInfo = new ProcessStartInfo
                        {
                            FileName = ffmpegPath,
                            Arguments = $"-i \"{inputFilePath}\" -c:v {codec} -b:v {bitrate}k -c:a copy \"{outputFilePath}\"",
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                            UseShellExecute = false,
                            CreateNoWindow = true
                        };

                        try
                        {
                            Process process = new Process
                            {
                                StartInfo = processStartInfo,
                                EnableRaisingEvents = true
                            };

                            process.OutputDataReceived += (sender, e) =>
                            {
                                if (!string.IsNullOrEmpty(e.Data))
                                {
                                    Dispatcher.Invoke(() => OutputTextBox.AppendText(e.Data + "\n"));
                                }
                            };

                            process.ErrorDataReceived += (sender, e) =>
                            {
                                if (!string.IsNullOrEmpty(e.Data))
                                {
                                    Dispatcher.Invoke(() => OutputTextBox.AppendText(" " + e.Data + "\n"));
                                }
                            };

                            process.Exited += (sender, e) =>
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    if (process.ExitCode == 0)
                                    {
                                        OutputTextBox.AppendText($"Конвертация завершена! Выходной файл: {outputFilePath}\n");
                                        OutputTextBox.AppendText("Конвертация успешно завершена. Вы можете продолжить работу.\n");
                                    }
                                    else
                                    {
                                        OutputTextBox.AppendText($"Произошла ошибка при конвертации. Код выхода: {process.ExitCode}\n");
                                    }
                                });
                            };

                            process.Start();
                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                        }
                        catch (Exception ex)
                        {
                            OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
                        }
                    }
                }
            }
        }

        private void ConvertAudio(string format)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Выберите аудио файл",
                Filter = "Аудио файлы (*.wav;*.aac;*.flac;*.ogg)|*.wav;*.aac;*.flac;*.ogg|Все файлы (*.*)|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() == true)
            {
                string inputFilePath = openFileDialog.FileName;

                BitrateInputWindow bitrateInputWindow = new BitrateInputWindow
                {
                    SelectedFormat = format 
                };

                if (bitrateInputWindow.ShowDialog() == true && bitrateInputWindow.Bitrate.HasValue)
                {
                    int bitrate = bitrateInputWindow.Bitrate.Value;
                    string codec = GetCodecForFormat(format);  

                    SaveFileDialog saveFileDialog = new SaveFileDialog
                    {
                        Title = "Сохранить файл",
                        Filter = $"{format.ToUpper()} Файлы|*.{format}|Все файлы|*.*"
                    };

                    if (saveFileDialog.ShowDialog() == true)
                    {
                        string outputFilePath = saveFileDialog.FileName;
                        string ffmpegPath = Settings.Default.FFmpegPath ?? string.Empty;

                        if (string.IsNullOrEmpty(ffmpegPath))
                        {
                            OutputTextBox.AppendText("Пожалуйста, укажите путь к ffmpeg.exe в настройках.\n");
                            return;
                        }

                        ProcessStartInfo processStartInfo = new ProcessStartInfo
                        {
                            FileName = ffmpegPath,
                            Arguments = $"-i \"{inputFilePath}\" -c:a {codec} -b:a {bitrate}k \"{outputFilePath}\"", 
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                            UseShellExecute = false,
                            CreateNoWindow = true
                        };

                        try
                        {
                            Process process = new Process
                            {
                                StartInfo = processStartInfo,
                                EnableRaisingEvents = true
                            };

                            process.OutputDataReceived += (sender, e) =>
                            {
                                if (!string.IsNullOrEmpty(e.Data))
                                {
                                    Dispatcher.Invoke(() => OutputTextBox.AppendText(e.Data + "\n"));
                                }
                            };

                            process.ErrorDataReceived += (sender, e) =>
                            {
                                if (!string.IsNullOrEmpty(e.Data))
                                {
                                    Dispatcher.Invoke(() => OutputTextBox.AppendText(" " + e.Data + "\n"));
                                }
                            };

                            process.Exited += (sender, e) =>
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    if (process.ExitCode == 0)
                                    {
                                        OutputTextBox.AppendText($"Конвертация завершена! Выходной файл: {outputFilePath}\n");
                                        OutputTextBox.AppendText("Конвертация успешно завершена. Вы можете продолжить работу.\n");
                                    }
                                    else
                                    {
                                        OutputTextBox.AppendText($"Произошла ошибка при конвертации. Код выхода: {process.ExitCode}\n");
                                    }
                                });
                            };

                            process.Start();
                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                        }
                        catch (Exception ex)
                        {
                            OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
                        }
                    }
                }
            }
        }


        private string GetCodecForFormat(string format)
        {
            switch (format.ToLower())
            {
                case "mp3":
                    return "libmp3lame";
                case "aac":
                    return "aac";
                case "flac":
                    return "flac";
                case "wav":
                    return "pcm_s16le";
                case "ogg":
                    return "libvorbis";
                default:
                    throw new InvalidOperationException("Неизвестный формат: " + format);
            }
        }



        private void ConvertToNokia_Click(object sender, RoutedEventArgs e)
        {
            ConvertToNokia();
        }

        private void ConvertToNokia()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Выберите видео файл",
                Filter = "Видео файлы (*.mp4;*.avi;*.wmv;*.mkv;*.mov;*.flv)|*.mp4;*.avi;*.wmv;*.mkv;*.mov;*.flv|Все файлы (*.*)|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() == true)
            {
                string inputFilePath = openFileDialog.FileName;
                int bitrate = 1000;
                string codec = "libx264";

                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Title = "Сохранить файл",
                    Filter = "MP4 Файлы|*.mp4|Все файлы|*.*"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string outputFilePath = saveFileDialog.FileName;

                    string ffmpegPath = Settings.Default.FFmpegPath ?? string.Empty;

                    if (string.IsNullOrEmpty(ffmpegPath))
                    {
                        OutputTextBox.AppendText("Пожалуйста, укажите путь к ffmpeg.exe в настройках.\n");
                        return;
                    }

                    ProcessStartInfo processStartInfo = new ProcessStartInfo
                    {
                        FileName = ffmpegPath,
                        Arguments = $"-i \"{inputFilePath}\" -c:v {codec} -b:v {bitrate}k -c:a aac -strict experimental -s 854x480 \"{outputFilePath}\"",
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    };

                    try
                    {
                        Process process = new Process
                        {
                            StartInfo = processStartInfo,
                            EnableRaisingEvents = true
                        };

                        process.OutputDataReceived += (sender, e) =>
                        {
                            if (!string.IsNullOrEmpty(e.Data))
                            {
                                Dispatcher.Invoke(() => OutputTextBox.AppendText(e.Data + "\n"));
                            }
                        };

                        process.ErrorDataReceived += (sender, e) =>
                        {
                            if (!string.IsNullOrEmpty(e.Data))
                            {
                                Dispatcher.Invoke(() => OutputTextBox.AppendText(" " + e.Data + "\n"));
                            }
                        };

                        process.Exited += (sender, e) =>
                        {
                            Dispatcher.Invoke(() =>
                            {
                                if (process.ExitCode == 0)
                                {
                                    OutputTextBox.AppendText($"Конвертация завершена! Выходной файл: {outputFilePath}\n");
                                    OutputTextBox.AppendText("Конвертация успешно завершена. Вы можете продолжить работу.\n");
                                }
                                else
                                {
                                    OutputTextBox.AppendText($"Произошла ошибка при конвертации. Код выхода: {process.ExitCode}\n");
                                }
                            });
                        };

                        process.Start();
                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                    }
                    catch (Exception ex)
                    {
                        OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
                    }
                }
            }
        }

        private void mP4ToAVIToolStripMenuItem_Click(object sender, RoutedEventArgs e)
        {
            ConvertWithFFmpeg("mp4", "avi");
        }

        private void mKVToMP4ToolStripMenuItem_Click(object sender, RoutedEventArgs e)
        {
            ConvertWithFFmpeg("mkv", "mp4");
        }

        private void mP4ToMKVToolStripMenuItem_Click(object sender, RoutedEventArgs e)
        {
            ConvertWithFFmpeg("mp4", "mkv");
        }

        private void ConvertWithFFmpeg(string inputFormat, string outputFormat)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = $"Выберите файл {inputFormat.ToUpper()}",
                Filter = $"{inputFormat.ToUpper()} Файлы|*.{inputFormat}|Все файлы|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() == true)
            {
                string inputFilePath = openFileDialog.FileName;
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Title = $"Сохранить файл {outputFormat.ToUpper()}",
                    Filter = $"{outputFormat.ToUpper()} Файлы|*.{outputFormat}|Все файлы|*.*"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string outputFilePath = saveFileDialog.FileName;
                    string ffmpegPath = Settings.Default.FFmpegPath ?? string.Empty;

                    if (string.IsNullOrEmpty(ffmpegPath) || !System.IO.File.Exists(ffmpegPath))
                    {
                        OutputTextBox.AppendText("Пожалуйста, укажите правильный путь к ffmpeg.exe в настройках.\n");
                        return;
                    }

                    ProcessStartInfo processStartInfo = new ProcessStartInfo
                    {
                        FileName = ffmpegPath,
                        Arguments = $"-i \"{inputFilePath}\" -c:v copy -c:a copy \"{outputFilePath}\"",
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    };

                    try
                    {
                        using (Process process = new Process())
                        {
                            process.StartInfo = processStartInfo;
                            process.OutputDataReceived += (sender, e) =>
                            {
                                if (!string.IsNullOrEmpty(e.Data))
                                {
                                    Dispatcher.Invoke(() =>
                                    {
                                        OutputTextBox.AppendText(e.Data + "\n");
                                        OutputTextBox.ScrollToEnd();
                                    });
                                }
                            };

                            process.ErrorDataReceived += (sender, e) =>
                            {
                                if (!string.IsNullOrEmpty(e.Data))
                                {
                                    Dispatcher.Invoke(() =>
                                    {
                                        OutputTextBox.AppendText("Ошибка: " + e.Data + "\n");
                                        OutputTextBox.ScrollToEnd();
                                    });
                                }
                            };

                            process.Start();
                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();

                            if (process.ExitCode == 0)
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    OutputTextBox.AppendText($"Конвертация завершена! Выходной файл: {outputFilePath}\n");
                                    OutputTextBox.AppendText("Конвертация успешно завершена. Вы можете продолжить работу.\n");
                                    OutputTextBox.ScrollToEnd();
                                });
                            }
                            else
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    OutputTextBox.AppendText($"Ошибка при конвертации. Код выхода: {process.ExitCode}\n");
                                    OutputTextBox.ScrollToEnd();
                                });
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
                    }
                }
            }
        }

        private void FormatDatabase_Click(object sender, RoutedEventArgs e)
        {
            DataBase dataBase = new DataBase();
            dataBase.ShowDialog();
        }
        private void CheckAndOpenUserDatabase()
        {
            try
            {

                string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "user_data.txt");

                if (!File.Exists(filePath))
                {
                    ErrorMessage.ShowError("Файл с данными пользователей не найден. Проверьте настройки.");
                    return;
                }

                var lines = File.ReadAllLines(filePath);

                bool isAuthorized = lines.Any(line =>
                {
                    var parts = line.Split(':');
                    return parts.Length > 0 && parts[0].Trim().Equals("dmitriy", StringComparison.OrdinalIgnoreCase);
                });

                if (isAuthorized)
                {
                    Window1 window1 = new Window1();
                    window1.ShowDialog();
                }
                else
                {
                    Window2 window2 = new Window2();
                    window2.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ErrorMessage.ShowError($"Ошибка при доступе к базе данных: {ex.Message}");
            }
        }



        private void UserDatabase_Click(object sender, RoutedEventArgs e)
        {
            CheckAndOpenUserDatabase(); ;
        }

        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {

            Application.Current.Shutdown();
        }

        private void Database_Click(object sender, RoutedEventArgs e)
        {
            DataBase databaseWindow = new DataBase();
            databaseWindow.Show();
        }
        private void MainWindow_KeyDown(object sender, KeyEventArgs e)
        {
            keySequence.Append(e.Key.ToString().ToLower());

            if (keySequence.ToString().Contains("ned"))
            {
                keySequence.Clear();
                Ned ned = new Ned();
                ned.Show();
            }
            else if (keySequence.Length > 5)
            {
                keySequence.Clear();
            }
        }

        private async void ConvertCDAudioToMP3_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DriveInfo[] drives = DriveInfo.GetDrives()
                    .Where(d => d.DriveType == DriveType.CDRom).ToArray();

                if (!drives.Any())
                {
                    OutputTextBox.AppendText("CD-ROM привод не найден.\n");
                    return;
                }

                var dialog = new SaveFileDialog
                {
                    Title = "Выберите папку для сохранения MP3 файлов",
                    FileName = "Выберите папку",
                    CheckPathExists = true
                };

                if (dialog.ShowDialog() != true)
                    return;

                string outputDir = Path.GetDirectoryName(dialog.FileName);

                foreach (DriveInfo drive in drives)
                {
                    if (!drive.IsReady)
                    {
                        OutputTextBox.AppendText($"Привод {drive.Name} не готов.\n");
                        continue;
                    }

                    OutputTextBox.AppendText($"Извлечение аудио с диска в приводе {drive.Name}...\n");

                    try
                    {
                        using (var reader = new NAudio.Wave.WaveInEvent())
                        {
                            reader.WaveFormat = new WaveFormat(44100, 16, 2);
                            int trackNumber = 1;

                            reader.DataAvailable += async (s, args) =>
                            {
                                string outputFile = Path.Combine(outputDir, $"track{trackNumber:D2}.mp3");

                                using (var writer = new LameMP3FileWriter(outputFile, reader.WaveFormat, LAMEPreset.STANDARD))
                                {
                                    await writer.WriteAsync(args.Buffer, 0, args.BytesRecorded);
                                }

                                await Dispatcher.InvokeAsync(() =>
                                {
                                    OutputTextBox.AppendText($"Трек {trackNumber} извлечен и сохранен как MP3.\n");
                                    OutputTextBox.ScrollToEnd();
                                });

                                trackNumber++;
                            };

                            reader.StartRecording();


                            await Task.Delay(30000);

                            reader.StopRecording();
                        }

                        OutputTextBox.AppendText($"Извлечение аудио завершено! Файлы сохранены в: {outputDir}\n");
                    }
                    catch (Exception ex)
                    {
                        OutputTextBox.AppendText($"Ошибка при извлечении аудио: {ex.Message}\n");
                    }
                }
            }
            catch (Exception ex)
            {
                OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
            }
        }

        private async void ExtractGifFrames_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Выберите GIF файл",
                Filter = "GIF файлы (*.gif)|*.gif|Все файлы (*.*)|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() != true)
                return;

            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Title = "Выберите папку для сохранения кадров",
                FileName = "Выберите папку",
                CheckPathExists = true
            };

            if (saveFileDialog.ShowDialog() != true)
                return;

            string inputFile = openFileDialog.FileName;
            string outputDir = Path.GetDirectoryName(saveFileDialog.FileName);
            string outputPattern = Path.Combine(outputDir, "frame_%04d.png");
            string ffmpegPath = Settings.Default.FFmpegPath;

            if (string.IsNullOrEmpty(ffmpegPath) || !File.Exists(ffmpegPath))
            {
                OutputTextBox.AppendText("Пожалуйста, укажите правильный путь к ffmpeg.exe в настройках.\n");
                return;
            }

            try
            {
                IsEnabled = false;
                OutputTextBox.AppendText("Начало извлечения кадров...\n");

                await Task.Run(() =>
                {
                    using (Process process = new Process())
                    {
                        ProcessStartInfo processStartInfo = new ProcessStartInfo
                        {
                            FileName = ffmpegPath,
                            Arguments = $"-i \"{inputFile}\" -vsync 0 \"{outputPattern}\"",
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                            UseShellExecute = false,
                            CreateNoWindow = true
                        };

                        process.StartInfo = processStartInfo;
                        process.OutputDataReceived += (s, args) =>
                        {
                            if (!string.IsNullOrEmpty(args.Data))
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    OutputTextBox.AppendText(args.Data + "\n");
                                    OutputTextBox.ScrollToEnd();
                                });
                            }
                        };

                        process.ErrorDataReceived += (s, args) =>
                        {
                            if (!string.IsNullOrEmpty(args.Data))
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    OutputTextBox.AppendText("Ошибка: " + args.Data + "\n");
                                    OutputTextBox.ScrollToEnd();
                                });
                            }
                        };

                        process.Start();
                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        Dispatcher.Invoke(() =>
                        {
                            if (process.ExitCode == 0)
                            {
                                OutputTextBox.AppendText($"Извлечение кадров завершено! Файлы сохранены в: {outputDir}\n");
                            }
                            else
                            {
                                OutputTextBox.AppendText($"Ошибка при извлечении кадров. Код выхода: {process.ExitCode}\n");
                            }
                            OutputTextBox.ScrollToEnd();
                        });
                    }
                });
            }
            catch (Exception ex)
            {
                OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
            }
            finally
            {
                IsEnabled = true;
            }
        }
        private async void ExtractVideoFrames_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Выберите видео файл",
                Filter = "Видео файлы (*.mp4;*.avi;*.wmv;*.mkv)|*.mp4;*.avi;*.wmv;*.mkv|Все файлы (*.*)|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() != true)
                return;

            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Title = "Выберите папку для сохранения кадров",
                FileName = "Выберите папку",
                CheckPathExists = true
            };

            if (saveFileDialog.ShowDialog() != true)
                return;

            string inputFile = openFileDialog.FileName;
            string outputDir = Path.GetDirectoryName(saveFileDialog.FileName);
            string outputPattern = Path.Combine(outputDir, "frame_%04d.jpg");

            string ffmpegPath = Settings.Default.FFmpegPath;
            if (string.IsNullOrEmpty(ffmpegPath) || !File.Exists(ffmpegPath))
            {
                OutputTextBox.AppendText("Пожалуйста, укажите правильный путь к ffmpeg.exe в настройках.\n");
                return;
            }

            try
            {
                IsEnabled = false;
                OutputTextBox.AppendText("Начало извлечения кадров из видео...\n");

                await Task.Run(() =>
                {
                    using (Process process = new Process())
                    {
                        ProcessStartInfo processStartInfo = new ProcessStartInfo
                        {
                            FileName = ffmpegPath,
                            Arguments = $"-i \"{inputFile}\" -vf fps=1 -frame_pts 1 \"{outputPattern}\"",
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                            UseShellExecute = false,
                            CreateNoWindow = true
                        };

                        process.StartInfo = processStartInfo;
                        process.OutputDataReceived += (s, args) =>
                        {
                            if (!string.IsNullOrEmpty(args.Data))
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    OutputTextBox.AppendText(args.Data + "\n");
                                    OutputTextBox.ScrollToEnd();
                                });
                            }
                        };

                        process.ErrorDataReceived += (s, args) =>
                        {
                            if (!string.IsNullOrEmpty(args.Data))
                            {
                                Dispatcher.Invoke(() =>
                                {
                                    OutputTextBox.AppendText(args.Data + "\n");
                                    OutputTextBox.ScrollToEnd();
                                });
                            }
                        };

                        process.Start();
                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        Dispatcher.Invoke(() =>
                        {
                            if (process.ExitCode == 0)
                            {
                                OutputTextBox.AppendText($"Извлечение кадров завершено! Файлы сохранены в: {outputDir}\n");
                            }
                            else
                            {
                                OutputTextBox.AppendText($"Ошибка при извлечении кадров. Код выхода: {process.ExitCode}\n");
                            }
                            OutputTextBox.ScrollToEnd();
                        });
                    }
                });
            }
            catch (Exception ex)
            {
                OutputTextBox.AppendText($"Произошла ошибка: {ex.Message}\n");
            }
            finally
            {
                IsEnabled = true;
            }
        }


        private void OpenCDAudioPlayer_Click(object sender, RoutedEventArgs e)
        {
            CD cD = new CD();
            cD.ShowDialog();
        }
        private void OpenAudioPlayer_Click(object sender, RoutedEventArgs e)
        {
            Audio audio = new Audio();
            audio.ShowDialog();
        }
        private void OpenMidiPlayer_Click(object sender, RoutedEventArgs e)
        {
            Midi midi = new Midi();
            midi.ShowDialog();
        }
        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {

        }
        private void Cipher_Click(object sender, RoutedEventArgs e)
        {
            Cipher cipher = new Cipher();
            cipher.ShowDialog();
        }

    }
}
Форма видеоплеера
using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using Microsoft.Win32;

namespace UltimateVideoConverter
{
    public partial class VideoPlayerWindow : Window
    {
        private DispatcherTimer sliderUpdateTimer;
        private bool isSliderDragging = false;
        private bool isFullScreen = false;
        private WindowState previousWindowState;
        private WindowStyle previousWindowStyle;

        public VideoPlayerWindow()
        {
            InitializeComponent();
            videoPlayer.MediaEnded += VideoPlayer_MediaEnded;
            videoPlayer.MediaOpened += VideoPlayer_MediaOpened;
            videoPlayer.MediaFailed += VideoPlayer_MediaFailed;

            sliderUpdateTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromMilliseconds(200)
            };
            sliderUpdateTimer.Tick += UpdateSlider;
            sliderUpdateTimer.Start();

            this.Loaded += Window_Loaded;
        }

        private void VideoPlayer_MediaOpened(object sender, RoutedEventArgs e)
        {
            if (videoPlayer.NaturalDuration.HasTimeSpan)
            {
                timeSlider.Maximum = videoPlayer.NaturalDuration.TimeSpan.TotalSeconds;
            }
            else
            {
                MessageBox.Show("Ошибка загрузки длительности видео", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void VideoPlayer_MediaEnded(object sender, RoutedEventArgs e)
        {
            videoPlayer.Stop();
            timeSlider.Value = 0;
        }

        private void VideoPlayer_MediaFailed(object sender, ExceptionRoutedEventArgs e)
        {
            videoPlayer.Stop();
            MessageBox.Show($"Ошибка воспроизведения: {e.ErrorException?.Message ?? "Неизвестная ошибка"}", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        private async void OpenFile_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Выберите видео файл",
                Filter = "Видео файлы (*.mp4;*.avi;*.wmv;*.mkv)|*.mp4;*.avi;*.wmv;*.mkv|Все файлы (*.*)|*.*",
                Multiselect = false
            };

            if (openFileDialog.ShowDialog() == true)
            {
                videoPlayer.Source = new Uri(openFileDialog.FileName);
                await Task.Delay(100);
                videoPlayer.Play();
            }
        }

        private void Pause_Click(object sender, RoutedEventArgs e)
        {
            videoPlayer.Pause();
        }

        private void Play_Click(object sender, RoutedEventArgs e)
        {
            videoPlayer.Play();
        }

        private void Stop_Click(object sender, RoutedEventArgs e)
        {
            videoPlayer.Stop();
            timeSlider.Value = 0;
        }

        private void TimeSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (isSliderDragging || !videoPlayer.NaturalDuration.HasTimeSpan)
                return;

            videoPlayer.Position = TimeSpan.FromSeconds(timeSlider.Value);
        }

        private void TimeSlider_DragStarted(object sender, RoutedEventArgs e)
        {
            isSliderDragging = true;
        }

        private void TimeSlider_DragCompleted(object sender, RoutedEventArgs e)
        {
            isSliderDragging = false;
            videoPlayer.Position = TimeSpan.FromSeconds(timeSlider.Value);
        }

        private void UpdateSlider(object sender, EventArgs e)
        {
            if (isSliderDragging || !videoPlayer.NaturalDuration.HasTimeSpan)
                return;

            double currentPosition = videoPlayer.Position.TotalSeconds;
            if (Math.Abs(currentPosition - timeSlider.Value) > 0.1)
            {
                timeSlider.Value = currentPosition;
            }
        }

        private void FullScreen_Click(object sender, RoutedEventArgs e)
        {
            if (!isFullScreen)
            {
                previousWindowState = WindowState;
                previousWindowStyle = WindowStyle;

                WindowState = WindowState.Maximized;
                WindowStyle = WindowStyle.None;
                isFullScreen = true;
            }
            else
            {
                WindowState = previousWindowState;
                WindowStyle = previousWindowStyle;
                isFullScreen = false;
            }
        }

        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            MainWindow mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            videoPlayer.Volume = 0.5;
            timeSlider.Minimum = 0;
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            const double skipSeconds = 5;

            if (e.Key == Key.Left)
            {
                double newPosition = Math.Max(0, videoPlayer.Position.TotalSeconds - skipSeconds);
                videoPlayer.Position = TimeSpan.FromSeconds(newPosition);
                timeSlider.Value = newPosition;
            }
            else if (e.Key == Key.Right)
            {
                double newPosition = Math.Min(videoPlayer.NaturalDuration.TimeSpan.TotalSeconds, videoPlayer.Position.TotalSeconds + skipSeconds);
                videoPlayer.Position = TimeSpan.FromSeconds(newPosition);
                timeSlider.Value = newPosition;
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            sliderUpdateTimer?.Stop();
            sliderUpdateTimer = null;
            videoPlayer?.Close();
        }
    }
}
Форма аудиоплеера
using System;
using System.Windows;
using Microsoft.Win32;
using NAudio.Wave;
using System.Collections.ObjectModel;
using System.Windows.Input;
using System.Windows.Controls;

namespace WpfApp2
{
    public class AudioTrack
    {
        public string FileName { get; set; }
        public string FilePath { get; set; }
    }
    public partial class Audio : Window
    {
        private WaveOutEvent _waveOutEvent;
        private AudioFileReader _audioFileReader;
        private ObservableCollection<AudioTrack> _tracks;
        private string selectedTrack;

        public Audio()
        {
            InitializeComponent();
            _tracks = new ObservableCollection<AudioTrack>();
            TrackList.ItemsSource = _tracks;
        }


        private void BtnOpen_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "MP3 Files|*.mp3|WAV Files|*.wav|All Files|*.*",
                Title = "Open Audio File"
            };
            if (openFileDialog.ShowDialog() == true)
            {
                string filePath = openFileDialog.FileName;
                string fileName = System.IO.Path.GetFileName(filePath);
                _tracks.Add(new AudioTrack { FileName = fileName, FilePath = filePath });
            }
        }

        private void TrackList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (TrackList.SelectedItem is AudioTrack track)
            {
                selectedTrack = track.FilePath;
            }
        }

        private void LoadAndPlayAudio(string filePath)
        {
            try
            {
                StopAudio();
                _audioFileReader = new AudioFileReader(filePath);
                _waveOutEvent = new WaveOutEvent();
                _waveOutEvent.Init(_audioFileReader);
                _waveOutEvent.PlaybackStopped += WaveOutEvent_PlaybackStopped;
                _waveOutEvent.Play();
            }
            catch (Exception)
            {
                // Handle exception silently
            }
        }

        private void WaveOutEvent_PlaybackStopped(object sender, StoppedEventArgs e)
        {
            // Playback stopped handler
        }

        private void PlayButton_Click(object sender, RoutedEventArgs e)
        {
            if (selectedTrack != null)
            {
                if (_waveOutEvent?.PlaybackState == PlaybackState.Paused)
                {
                    _waveOutEvent.Play();
                }
                else
                {
                    LoadAndPlayAudio(selectedTrack);
                }
            }
        }

        private void PauseButton_Click(object sender, RoutedEventArgs e)
        {
            if (_waveOutEvent != null && _waveOutEvent.PlaybackState == PlaybackState.Playing)
            {
                _waveOutEvent.Pause();
            }
        }

        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            StopAudio();
        }

        private void StopAudio()
        {
            if (_waveOutEvent != null && _waveOutEvent.PlaybackState != PlaybackState.Stopped)
            {
                _waveOutEvent.Stop();
                _audioFileReader?.Dispose();
                _waveOutEvent.Dispose();
            }
        }

        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}

Форма Audio CD-плеера
using AudioCDPlayer;
using System;
using System.IO;
using System.Windows;

namespace WpfApp2
{
  
    public partial class CD : Window
    {
        private MciPlayer mciPlayer;
        private string currentDrive;
        private bool isPaused;
        public CD()
        {
            InitializeComponent();
            mciPlayer = new MciPlayer();
            LoadCDDrives();
        }
        private void LoadCDDrives()
        {
            DriveList.Items.Clear();
            foreach (DriveInfo drive in DriveInfo.GetDrives())
            {
                if (drive.DriveType == DriveType.CDRom)
                {
                    DriveList.Items.Add(drive.Name);
                }
            }
        }

        private void DriveList_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (DriveList.SelectedItem != null)
            {
                currentDrive = DriveList.SelectedItem.ToString();
                LoadTracks();
            }
        }

        private void LoadTracks()
        {
            TrackList.Items.Clear();
            try
            {
                string[] files = Directory.GetFiles(currentDrive, "*.cda");
                for (int i = 0; i < files.Length; i++)
                {
                    TrackList.Items.Add($"Track {i + 1}");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error loading tracks: " + ex.Message);
            }
        }

        private void PlayButton_Click(object sender, RoutedEventArgs e)
        {
            if (TrackList.SelectedItem == null) return;

            try
            {
                if (isPaused)
                {
                    mciPlayer.Resume();
                    isPaused = false;
                }
                else
                {
                    int trackNumber = TrackList.SelectedIndex + 1;
                    string driveLetter = currentDrive.Substring(0, 1);
                    mciPlayer.PlayCDAudio(driveLetter, trackNumber);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error playing track: " + ex.Message);
            }
        }

        private void PauseButton_Click(object sender, RoutedEventArgs e)
        {
            mciPlayer.Pause();
            isPaused = true;
        }

        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            mciPlayer.Stop();
            isPaused = false;
        }

        private void TrackList_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            StopButton_Click(null, null);
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            StopButton_Click(null, null);
            base.OnClosing(e);
        }
        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {

            this.Close();
        }
    }
}
//Mci Player.cs
using System;
using System.Text;
using System.Runtime.InteropServices;

namespace AudioCDPlayer
{
    public class MciPlayer
    {
        [DllImport("winmm.dll")]
        private static extern long mciSendString(string command, StringBuilder returnString, int returnLength, IntPtr winHandle);

        private StringBuilder returnData = new StringBuilder(128);

        public void PlayCDAudio(string driveLetter, int trackNumber)
        {
            Stop();
            mciSendString($"open {driveLetter} type cdaudio alias cd", returnData, 0, IntPtr.Zero);
            mciSendString($"set cd time format tmsf", returnData, 0, IntPtr.Zero);
            mciSendString($"play cd from {trackNumber}", returnData, 0, IntPtr.Zero);
        }

        public void Pause()
        {
            mciSendString("pause cd", returnData, 0, IntPtr.Zero);
        }

        public void Resume()
        {
            mciSendString("resume cd", returnData, 0, IntPtr.Zero);
        }

        public void Stop()
        {
            mciSendString("stop cd", returnData, 0, IntPtr.Zero);
            mciSendString("close cd", returnData, 0, IntPtr.Zero);
        }
    }
}
Форма выбора кодека и битрейта
using System.Windows;
using System.Windows.Controls;

namespace UltimateVideoConverter
{
    public partial class BitrateInputWindow : Window
    {
        public int? Bitrate { get; private set; }
        public string SelectedFormat { get; set; } // Новый параметр для передачи формата

        public BitrateInputWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            UpdateCodecOptions(); // Обновляем список кодеков при загрузке окна
        }

        private void UpdateCodecOptions()
        {
            CodecComboBox.Items.Clear();

            // Условие для доступных кодеков в зависимости от формата
            if (SelectedFormat == "mov" || SelectedFormat == "flv")
            {
                CodecComboBox.Items.Add(new ComboBoxItem { Content = "libx264" });
            }
            else
            {
                CodecComboBox.Items.Add(new ComboBoxItem { Content = "libx264" });
                CodecComboBox.Items.Add(new ComboBoxItem { Content = "libx265" });
                CodecComboBox.Items.Add(new ComboBoxItem { Content = "mpeg4" });
                CodecComboBox.Items.Add(new ComboBoxItem { Content = "copy" });
            }

            // Выбор первого элемента по умолчанию
            if (CodecComboBox.Items.Count > 0)
                CodecComboBox.SelectedIndex = 0;
        }

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (int.TryParse(BitrateTextBox.Text, out int bitrate))
                {
                    Bitrate = bitrate;
                }
                else
                {
                    MessageBox.Show("Пожалуйста, введите допустимый битрейт.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                var selectedCodec = (CodecComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();

                if (string.IsNullOrEmpty(selectedCodec))
                {
                    MessageBox.Show("Пожалуйста, выберите кодек.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                this.Tag = selectedCodec;

                this.DialogResult = true;
                this.Close();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show($"Произошла ошибка: {ex.Message}", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
            this.Close();
        }

        private void QualitySlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (QualityLabel != null && BitrateTextBox != null)
            {
                switch ((int)e.NewValue)
                {
                    case 1:
                        QualityLabel.Content = "360p";
                        BitrateTextBox.Text = "500";
                        break;
                    case 2:
                        QualityLabel.Content = "720p";
                        BitrateTextBox.Text = "1500";
                        break;
                    case 3:
                        QualityLabel.Content = "1080p";
                        BitrateTextBox.Text = "3000";
                        break;
                }
            }
        }
    }
}
